#! /usr/bin/env python

#import rospy

def find_neighbors(index, width, height, costmap, orthogonal_step_cost):
  """
  Identifies neighbor nodes inspecting the 8 adjacent neighbors
  Checks if neighbor is inside the map boundaries and if is not an obstacle according to a threshold
  Returns a list with valid neighbour nodes as [index, step_cost] pairs
  """
  neighbors = []
  
  diagonal_step_cost = orthogonal_step_cost * 1.41421
  
  lethal_cost = 1

  upper = index - width
  if upper > 0:
    if costmap[upper] < lethal_cost:
      step_cost = orthogonal_step_cost + costmap[upper]/255
      neighbors.append([upper, step_cost])

  left = index - 1
  if left % width > 0:
    if costmap[left] < lethal_cost:
      step_cost = orthogonal_step_cost + costmap[left]/255
      neighbors.append([left, step_cost])

  upper_left = index - width - 1
  if upper_left > 0 and upper_left % width > 0:
    if costmap[upper_left] < lethal_cost:
      step_cost = diagonal_step_cost + costmap[upper_left]/255
      neighbors.append([index - width - 1, step_cost])

  upper_right = index - width + 1
  if upper_right > 0 and (upper_right) % width != (width - 1):
    if costmap[upper_right] < lethal_cost:
      step_cost = diagonal_step_cost + costmap[upper_right]/255
      neighbors.append([upper_right, step_cost])

  right = index + 1
  if right % width != (width + 1):
    if costmap[right] < lethal_cost:
      step_cost = orthogonal_step_cost + costmap[right]/255
      neighbors.append([right, step_cost])

  lower_left = index + width - 1
  if lower_left < height * width and lower_left % width != 0:
    if costmap[lower_left] < lethal_cost:
      step_cost = diagonal_step_cost + costmap[lower_left]/255
      neighbors.append([lower_left, step_cost])

  lower = index + width
  if lower <= height * width:
    if costmap[lower] < lethal_cost:
      step_cost = orthogonal_step_cost + costmap[lower]/255
      neighbors.append([lower, step_cost])

  lower_right = index + width + 1
  if (lower_right) <= height * width and lower_right % width != (width - 1):
    if costmap[lower_right] < lethal_cost:
      step_cost = diagonal_step_cost + costmap[lower_right]/255
      neighbors.append([lower_right, step_cost])

  return neighbors

def indexToWorld(flatmap_index, map_width, map_resolution, map_origin = [0,0]):
    """
    Converts a flatmap index value to world coordinates (meters)
    flatmap_index: a linear index value, specifying a cell/pixel in an 1-D array
    map_width: number of columns in the occupancy grid
    map_resolution: side lenght of each grid map cell in meters
    map_origin: the x,y position in grid cell coordinates of the world's coordinate origin
    Returns a list containing x,y coordinates in the world frame of reference
    """
    # convert to x,y grid cell/pixel coordinates
    grid_cell_map_x = flatmap_index % map_width
    grid_cell_map_y = flatmap_index // map_width
    # convert to world coordinates
    x = map_resolution * grid_cell_map_x + map_origin[0]
    y = map_resolution * grid_cell_map_y + map_origin[1]

    return [x,y]

def euclidean_distance(a, b):
    distance = 0
    for i in range(len(a)):
        distance += (a[i] - b[i]) ** 2
    return distance ** 0.5

def manhattan_distance(a, b):
    return (abs(a[0] - b[0]) + abs(a[1] - b[1]))

def a_star(start_index, goal_index, width, height, costmap, resolution, origin):#, grid_viz):
  ''' 
  Performs A-star's shortes path algorithm search on a costmap with a given start and goal node
  '''

  # list to hold the unexplored nodes 
  open_list = []

  # set to hold the nodes visited by algorithm 
  closed_list = set()

  # parents of current node
  parents = dict()

  # cost of the algorith
  g_costs = dict()

  # heurstic cost 
  f_costs = dict()

  
  g_costs[start_index] = 0

  
  from_xy = indexToWorld(start_index, width, resolution, origin)
  to_xy = indexToWorld(goal_index, width, resolution, origin)
  h_cost = euclidean_distance(from_xy, to_xy)

  
  f_costs[start_index] = h_cost
  
 
  open_list.append([start_index, h_cost])

  shortest_path = []

  path_found = False
  print('A-Star: Done with initialization')

  
  while open_list:

    
    open_list.sort(key = lambda x: x[1]) 
    
    current_node = open_list.pop(0)[0]

    
    closed_list.add(current_node)

    
    #grid_viz.set_color(current_node,"pale yellow")

    
    if current_node == goal_index:
      path_found = True
      break

    
    neighbors = find_neighbors(current_node, width, height, costmap, resolution)

    
    for neighbor_index, step_cost in neighbors:

      
      if neighbor_index in closed_list:
        continue

      
      g_cost = g_costs[current_node] + step_cost

      
      from_xy = indexToWorld(neighbor_index, width, resolution, origin)
      to_xy = indexToWorld(goal_index, width, resolution, origin)
      h_cost = euclidean_distance(from_xy, to_xy)
      #h_cost = manhattan_distance(from_xy, to_xy) 

      
      f_cost = g_cost + h_cost

      
      in_open_list = False
      for idx, element in enumerate(open_list):
        if element[0] == neighbor_index:
          in_open_list = True
          break

      # CASE 1: neighbor already in open_list
      if in_open_list:
        if f_cost < f_costs[neighbor_index]:
          
          g_costs[neighbor_index] = g_cost
          
          f_costs[neighbor_index] = f_cost
          parents[neighbor_index] = current_node
          
          open_list[idx] = [neighbor_index, f_cost]

      # CASE 2: neighbor not in open_list
      else:
        
        g_costs[neighbor_index] = g_cost
        
        f_costs[neighbor_index] = f_cost
        parents[neighbor_index] = current_node
        
        open_list.append([neighbor_index, f_cost])

        
        #grid_viz.set_color(neighbor_index,'orange')

  print('A-Star: Done traversing nodes in open_list')

  if not path_found:
    print('A-Star: No path found!')
    return shortest_path

  
  if path_found:
      node = goal_index
      shortest_path.append(goal_index)
      while node != start_index:
          shortest_path.append(node)
          node = parents[node]
  # reverse list
  shortest_path = shortest_path[::-1]
  print('A-Star: Done reconstructing path')


  return shortest_path

if __name__=="__main__":
  print("Dhana!!")
  my_width=74
  my_height= 74
  my_start_index=2050
  my_goal_index= 2345
  my_resolution= 0.2
  my_origin = [-7.4, -7.4, 0]
  my_costmap
  
  

  path = a_star(my_start_index, my_goal_index, my_width,my_height, my_costmap, my_resolution, my_origin )
  print("path =  \n", path)
  print ("Time Taken= ", len(path))

  print("xytoindex:", indexToWorld(my_start_index, my_width, my_resolution, my_origin))




# Human_Trajectory_Prediction: 

#print (my_costmap)