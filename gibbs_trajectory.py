#! /usr/bin/env python

# imports 
import matplotlib.pyplot as plt
import random
#import costmap
from transition_vectors import create_transition_vector
from next_state_to_index import next_state_to_index
from distance_funs import euclidean_distance,manhatten_distance
import a_star

# 

# total number of grids = height * width
# resolution = meters / pixel
# here, resolution is 0.2
cm_height = 74
cm_width  = 74

# costmap occupancy (static Obstacle)
## value 254, 255 indicates the definite obstacle 
## value less 128 indicates it the freespace 
### value 128 to 253 indicates the possicility of collision inflation layer in the obstacle, the robot can move in these grids.

my_costmap


## Importing from robot plan from A star 
### Planning the robot plan using A* algorithm (file: a_star.py)
my_start_index=2050
my_goal_index= 2345
my_resolution= 0.2
my_origin = [-7.4, -7.4, 0]
### a_star(start_index, goal_index, width, height, costmap, resolution, origin)
#(input 2 for a risk event detector)
robot_plan = a_star.a_star(my_start_index, my_goal_index, cm_width, cm_height,my_costmap, my_resolution, my_origin)

'''input_1 = [0] * len(predicted_human_trajectory) ## Dummy Input 

for i in range(len(input_1)): 
    input_1[i] =random.randint(0,74*74)'''

cost_map_values =set()
for i in range(len(my_costmap)):
    cost_map_values.add(my_costmap[i])
print("cost_map_values=", cost_map_values)

### create occupancy Probability matrix for humans : 

occupancy_human = [0] * len(my_costmap)
#print("debug", occupancy_probability_human)
#print ("DEbug:", len(occupancy_probability_human))

for i in range(len(occupancy_human)):
    occupancy_human[i] = random.randint(0,100)
print("debug", occupancy_human)

### occupancy probability 
total_steps = sum (occupancy_human)
human_occupancy_probability = [0] * len(my_costmap)

for i in range (len(human_occupancy_probability)):
    human_occupancy_probability[i] = occupancy_human[i]/ total_steps
print("human_occupancy_probability", human_occupancy_probability)

# Create Transition Probability Matrix for humans: 
# initialized
transition_probability_tensor = [] 

#some internal variables 
count_normal = 0
corner1 = []
corner2 = []
corner3 = []
corner4 = []

edges_right =[]
edges_left = []
edges_upper = []
edges_lower = []

normal = []

# create masks for the corners and edges
# different index have differnet transition vector depends on the location of the grid.
# Masks takes care of this 
# eg. corner grids have only 4 transitions possible out of 9 total
mask_corner1 = [0,0,0,0,1,1,0,1,1]
mask_corner2 = [0,0,0,1,1,0,1,1,0]
mask_corner3 = [0,1,1,0,1,1,0,0,0]
mask_corner4 = [1,1,0,1,1,0,0,0,0]

mask_edge_left = [1,1,1,1,1,1,0,0,0]
mask_edge_right = [0,0,0,1,1,1,1,1,1]
mask_edge_upper = [1,1,0,1,1,0,1,1,0]
mask_edge_lower = [0,1,1,0,1,1,0,1,1]

normal_mask = [1,1,1, 1,1,1, 1,1,1]

for i in range(cm_width* cm_height):
    if (i == 0):
        print("corner 1")
        print(i)
        corner1.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_corner1))
    elif (i == cm_height -1):
        print ("corner2")
        print(i)
        corner2.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_corner2))
    elif (i == cm_height*cm_width - cm_width):
        print("corner 3")
        print(i)
        corner3.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_corner3))
    elif (i == cm_width*cm_height - 1):
        print("corner 4")
        print(i)
        corner4.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_corner4))
    elif (i>0 and i<cm_height-1): # good 
        print("right_edges")
        print(i)
        edges_right.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_edge_right))
        
    elif (i%cm_width ==0):  # good
        print("lower_egdes")
        print(i)
        edges_lower.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_edge_lower))
        
    elif ((i%cm_height) == (cm_width-1)): # good 
        print("upper_edges")
        print(i)
        edges_upper.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_edge_upper))
        
    elif (i>((cm_height*cm_width)-cm_height) and i<=((cm_height*cm_width)-1)): #good
        print("left_edges")
        print(i)
        edges_left.append(i)
        transition_probability_tensor.append(create_transition_vector (mask_edge_left))
        
    else:
        count_normal =+ 1
        normal.append(i)
        transition_probability_tensor.append(create_transition_vector (normal_mask))
        

print(count_normal)
print("corner1 :", corner1,len(corner1))
print("corner2 :", corner2,len(corner2))
print("corner3 :", corner3,len(corner3))
print("corner4 :", corner4,len(corner4))

print("left:",edges_left,len(edges_left) )
print("lower:",edges_lower,len(edges_lower))
print("right:",edges_right,len(edges_right))
print("upper",edges_upper,len(edges_upper))

print ("normal:", normal, len(normal))



# create masks for the corners and edges
mask_corner1 = [0,0,0,0,1,1,0,1,1]
mask_corner2 = [0,0,0,1,1,0,1,1,0]
mask_corner3 = [0,1,1,0,1,1,0,0,0]
mask_corner4 = [1,1,0,1,1,0,0,0,0]

mask_edge_left = [1,1,1,1,1,1,0,0,0]
mask_edge_right = [0,0,0,1,1,1,1,1,1]
mask_edge_upper = [1,1,0,1,1,0,1,1,0]
mask_edge_lower = [0,1,1,0,1,1,0,1,1]


print ("Mega Debug !!!!! ")

### Prints all the data genrated so far in step fashion 
for i in range(len(transition_probability_tensor)):
    print (i,":", human_occupancy_probability[i], transition_probability_tensor[i], "sum: ",sum(transition_probability_tensor[i]))

print("cost_map_values=", cost_map_values)


### Human Trajectory Prediction
### checking the length of the costmap which has the height = 74, width =74 and len in 1d = height * width

print ("len(my_costmap)", len(my_costmap))

### Rounding off the Occupancy Matrix  

for i in range(len(human_occupancy_probability)):
    human_occupancy_probability[i] = round(human_occupancy_probability[i],4)

print("occupancy Matrix:", human_occupancy_probability)

print("1:",transition_probability_tensor[1], sum(transition_probability_tensor[1]))
print("0:",transition_probability_tensor[0], sum(transition_probability_tensor[0]))
print("last:",transition_probability_tensor[74*74-1], sum(transition_probability_tensor[74*74-1]))
print("5:",transition_probability_tensor[5], sum(transition_probability_tensor[5]))


### Now, data is availble in the form of occupancy probability matrix and transition probability matrix
### Do predicction given the current index 

human_initial_index = random.randint(0, 74*74)

#printing the transition vector for this index 100
print ("100: ",transition_probability_tensor[human_initial_index], 
      ",sum: ", round(sum(transition_probability_tensor[human_initial_index]),3), 
       ",max_value: ", max(transition_probability_tensor[human_initial_index]))

# select the index of the transition vector that has the maximum value

next_state = transition_probability_tensor[human_initial_index].index(max(transition_probability_tensor[human_initial_index]))
next_state =+ 1

print("next state = ", next_state)
# The next state is obtained using the argmax of the transition matrix 
# the convert the state into actual index in the map
# at t = 0, human location (index) is given by the variable huamn_initial_index

next_index = next_state_to_index(45, 9)
print("next_index::", next_index)

ensemble_trajectory = []
for j in range (4):
    
    for i in range(len(robot_plan)): ## for time steps = len(robot_plan)
        next_state=transition_probability_tensor[predicted_human_trajectory[i]].index(max(transition_probability_tensor[predicted_human_trajectory[i]]))
        next_state = next_state + 1
        next_index = next_state_to_index(predicted_human_trajectory[i],next_state)
        predicted_human_trajectory.append(next_index)
    ensemble_trajectory.append(predicted_human_trajectory)

print ("Ensemble : ", ensemble_trajectory)